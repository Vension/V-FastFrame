apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: "org.jetbrains.dokka-android"

/**
 *  @param group 发布到组织名称名字，必须填写
 *  @param version 版本号，下次更新是只需要更改版本号即可
 *  （kv.vension.xxx）这样写是不好的，项目名会拼上去
 *  我手欠然后最后就是这样了，大家引以为戒 implementation 'kv.vension.xxx:xxx:1.0.0'
 *  配置后上传至JCenter后的编译路径是这样的： implementation 'kv.vension.xxx:1.0.0'
 */
group = "kv.vension"//TODO:唯一包名必填（**慎重填写**）这里是groupId,对应com.squareup.okhttp3:okhttp:3.4.1中的com.squareup.okhttp3部分
version = "0.0.2" //TODO:这里上传到jcenter是版本的控制，比如implementation 'com.squareup.okhttp3:okhttp:3.4.1'中的3.4.1就是这里配置的。

/**
 *  定义两个链接，下面会用到。
 *  @param siteUrl 项目主页
 *  @param gitUrl 项目的Git仓库的url
 *  @param libName 发布到JCenter上的项目名字
 */
def siteUrl = 'https://github.com/unboundedcode/V-FastFrame'//TODO:项目的主页(可以写自己的库的GitHub地址)
def gitUrl = 'https://github.com/unboundedcode/V-FastFrame.git'//TODO:Git仓库的url  这个是说明，可随便填
def libName = "FastFrame"//TODO:修改依赖库名称
def libDesc = "FastFrame**是一个提供了常用模块的**个人快捷开发框架**，采用Glide4.9+rxjava2+retrofit2+mvp的组件化开发模式，不断完善中。。。"

// =========================== 上传到JCenter ===================================================
/**
 * 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，
 * 所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
 */
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")    //Bintray的用户名:读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //Bintray的ApiKey:读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        repo = "maven"//(**慎重填写**)这里填写在bintray中自己新建仓库的名字
        name = libName //（**慎重填写**）发布到JCenter上的项目名字，必须填写，对应com.squareup.okhttp3:okhttp:3.4.1中的okhttp
        version version
        userOrg = 'vension'//Bintray的组织id
        //项目描述
        desc = libDesc
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true// 是否是公开项目。
    }
}

/**
 * 配置maven库，生成POM.xml文件
 */
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name libName //项目名字
                url siteUrl // 项目主
                description libDesc// 可选，项目描述。
                licenses {// 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                    license {
                        name 'The CommonUtil Software License, Version 1.0.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {//TODO: 填写开发者基本信息，复制我的，这里需要修改。
                        id 'vension' // 开发者的id。
                        name 'KevinHu' // 开发者名字。
                        email 'vensionHu@qq.com' // 开发者邮箱。
                    }
                }
                scm { // SCM，复制我的，这里不需要修改。
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}


if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//    // options.encoding = 'UTF-8'
//}
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
//解决kotlin javadoc.options报错
dokka {
    outputFormat ='html'
    outputDirectory ="$buildDir/javadoc"
}



/**
 * 执行上传命令
 * 1、打开Android Studio底部工具栏的Terminal，输入命令：
 * gradlew clean build
 * windows：gradlew install
 * mac：./gradlew installl
 * BUILD SUCCESSFUL说明执行成功。
 * 2、上传到Bintray
 * windows：gradlew bintrayUpload
 * mac：./gradlew bintrayUpload
 * BUILD SUCCESSFUL说明上传成功。
 */